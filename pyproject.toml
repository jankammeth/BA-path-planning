[build-system]
requires = ["setuptools>=68", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "path-planning"
version = "0.1.0"
description = "Large-scale collision-free trajectory generation."
readme = "README.md"
authors = [{ name = "Jan Kamm" }]
license = { text = "Apache-2.0" }
requires-python = ">=3.10"

# Core runtime deps (keep training deps optional)
dependencies = [
    "numpy>=1.23",
    "scipy>=1.10",
    "matplotlib>=3.7",
    "osqp>=0.6",
    "pyyaml>=6.0"
]

[project.optional-dependencies]
# Dev tools
dev = [
    "pytest>=8",
    "pytest-cov>=5",
    "pre-commit>=3.7",
    "commitizen>=3.30",
    "black>=24.8",
    "ruff>=0.6",
    "tomli; python_version < '3.11'",
]

# ML stack split so torch stays optional (and installable per-platform).
ml = [
    "scikit-learn>=1.3",
    "pandas>=2.0",
]
torch = [
    # users typically install the right wheel themselves; this keeps it optional
    "torch; platform_system != 'Darwin' or python_version < '3.13'"
]
viz = [
    "umap-learn>=0.5"  # optional for fancier embeddings
]

[tool.setuptools.packages.find]
where = ["src"]
include = ["path_planning*"]

[project.scripts]
compute-trajectories = "path_planning.cli.compute_trajectories:main"
compute-trajectories-batch = "path_planning.cli.compute_trajectories_batch:main"
plot-collisions = "path_planning.viz.plot_collisions:main"
scp-boxplot = "path_planning.viz.plot_runtime_boxplot:main"
train-network = "path_planning.viz.train_collision_network:main"
position-generator = "path_planning.scenarios.position_generator:main"

[tool.black]
line-length = 100

[tool.ruff]
line-length = 100
src = ["src"]

[tool.ruff.lint]
select = ["E", "F", "I", "B", "UP"]
ignore = ["E501"]

[tool.ruff.lint.isort]
known-first-party = ["path_planning"]

[tool.pytest.ini_options]
testpaths = ["tests"]
